/* Copyright (c) 2024 vesoft inc. All rights reserved.
 *
 * This source code is licensed under Apache 2.0 License.
 */

package com.vesoft.nebula5.jdbc.statement;

import com.vesoft.nebula5.jdbc.NebulaConnection;
import com.vesoft.nebula5.jdbc.NebulaResultSet;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

public class NebulaStatementImpl extends NebulaStatement {

    protected NebulaConnection connection;

    protected ResultSet currentResultSet;
    protected int       currentAffectNum;

    protected boolean closed = false;

    public NebulaStatementImpl(NebulaConnection connection) {
        this.connection = connection;
    }

    @Override
    public ResultSet executeQuery(String gql) throws SQLException {
        execute(gql);
        return currentResultSet;
    }

    @Override
    public int executeUpdate(String gql) throws SQLException {
        execute(gql);
        return currentAffectNum;
    }

    @Override
    public void close() throws SQLException {
        closed = true;
    }


    @Override
    public int getQueryTimeout() throws SQLException {
        return (int) connection.getQueryTimeout();
    }



    @Override
    public boolean execute(String gql) throws SQLException {
        com.vesoft.nebula.driver.graph.data.ResultSet result = connection.execute(gql);
        if (!result.isSucceeded()) {
            throw new SQLException(String.format("gql %s executed failed, error code: %s, error message: %s",
                                                 gql,
                                                 result.getErrorCode().code,
                                                 result.getErrorMessage()));

        }
        currentResultSet = new NebulaResultSet(result, this);
        currentAffectNum = (int) (result.getExtraInfo().getAffectedNodes() + result.getExtraInfo().getAffectedEdges());
        return true;
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return currentResultSet;
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return currentAffectNum;
    }


    @Override
    public int getResultSetConcurrency() throws SQLException {
        return currentResultSet.getConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return currentResultSet.getType();
    }


    @Override
    public int[] executeBatch() throws SQLException {
        return new int[0];
    }

    @Override
    public Connection getConnection() throws SQLException {
        return connection;
    }



    @Override
    public int executeUpdate(String gql, int autoGeneratedKeys) throws SQLException {
        execute(gql);
        return currentAffectNum;
    }

    @Override
    public int executeUpdate(String gql, int[] columnIndexes) throws SQLException {
        execute(gql);
        return currentAffectNum;
    }

    @Override
    public int executeUpdate(String gql, String[] columnNames) throws SQLException {
        execute(gql);
        return currentAffectNum;
    }

    @Override
    public boolean execute(String gql, int autoGeneratedKeys) throws SQLException {
        return execute(gql);
    }

    @Override
    public boolean execute(String gql, int[] columnIndexes) throws SQLException {
        return execute(gql);
    }

    @Override
    public boolean execute(String gql, String[] columnNames) throws SQLException {
        return execute(gql);
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return currentResultSet.getHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return closed;
    }


}
